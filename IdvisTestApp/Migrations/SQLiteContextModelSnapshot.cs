// <auto-generated />
using System;
using IdvisTestApp.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdvisTestApp.Migrations
{
    [DbContext(typeof(SQLiteContext))]
    partial class SQLiteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("IdvisTestApp.Entities.Axis.Axis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int?>("BarchartId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BarchartId");

                    b.Property<int>("ColorAuto")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ColorAuto");

                    b.Property<string>("ColorFrom")
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorFrom");

                    b.Property<string>("ColorTo")
                        .HasColumnType("TEXT")
                        .HasColumnName("ColorTo");

                    b.Property<int?>("HeatmapId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("HeatmapId");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT")
                        .HasColumnName("Key");

                    b.Property<int?>("LinechartId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LinechartId");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<int>("ScaleAuto")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ScaleAuto");

                    b.Property<float?>("ScaleFrom")
                        .HasColumnType("REAL")
                        .HasColumnName("ScaleFrom");

                    b.Property<float?>("ScaleTo")
                        .HasColumnType("REAL")
                        .HasColumnName("ScaleTo");

                    b.Property<int?>("ScatterchartId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ScatterchartId");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("BarchartId");

                    b.HasIndex("HeatmapId");

                    b.HasIndex("LinechartId");

                    b.HasIndex("ScatterchartId");

                    b.ToTable("Axis", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.BarchartTile.BarchartTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Aggregator")
                        .HasColumnType("TEXT")
                        .HasColumnName("Aggregator");

                    b.Property<int>("AutoRefresh")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AutoRefresh");

                    b.Property<int?>("CategoryLimit")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CategoryLimit");

                    b.Property<int>("DisplayMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DisplayMode");

                    b.Property<int>("LegendInTiledMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LegendInTiledMode");

                    b.Property<int>("PercentageMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PercentageMode");

                    b.Property<int>("ShowOthers")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ShowOthers");

                    b.Property<int>("SortMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SortMode");

                    b.Property<int>("TileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TileId");

                    b.HasKey("Id");

                    b.HasIndex("TileId");

                    b.ToTable("BarchartTiles", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.Dashboard.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Dashboards", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.Datasource.Datasource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("ConnectionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ConnectionId");

                    b.Property<string>("DatPassword")
                        .HasColumnType("TEXT")
                        .HasColumnName("DatPassword");

                    b.Property<string>("DatPathFrom")
                        .HasColumnType("TEXT")
                        .HasColumnName("DatPathFrom");

                    b.Property<int>("DatPathReplace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("DatPathReplace");

                    b.Property<string>("DatPathTo")
                        .HasColumnType("TEXT")
                        .HasColumnName("DatPathTo");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("PdfPathFrom")
                        .HasColumnType("TEXT")
                        .HasColumnName("PdfPathFrom");

                    b.Property<int>("PdfPathReplace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("PdfPathReplace");

                    b.Property<string>("PdfPathTo")
                        .HasColumnType("TEXT")
                        .HasColumnName("PdfPathTo");

                    b.Property<string>("TableOrStoreName")
                        .HasColumnType("TEXT")
                        .HasColumnName("TableOrStoreName");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.ToTable("Datasources", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.DatasourceConnection.DatasourceConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Host")
                        .HasColumnType("TEXT")
                        .HasColumnName("Host");

                    b.Property<int>("IntegratedSecurity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IntegratedSecurity");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasColumnName("Password");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Port");

                    b.Property<string>("Realm")
                        .HasColumnType("TEXT")
                        .HasColumnName("Realm");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Type");

                    b.Property<string>("User")
                        .HasColumnType("TEXT")
                        .HasColumnName("User");

                    b.HasKey("Id");

                    b.ToTable("DatasourceConnections", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.Filter.Filter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int?>("DashboardId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DashboardId");

                    b.Property<int?>("DatasourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FileCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FileCount");

                    b.Property<int>("IsRelative")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsRelative");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT")
                        .HasColumnName("Key");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<float?>("NumEnd")
                        .HasColumnType("REAL")
                        .HasColumnName("NumEnd");

                    b.Property<string>("NumMultiEnd")
                        .HasColumnType("TEXT")
                        .HasColumnName("NumMultiEnd");

                    b.Property<float?>("NumMultiRangeEnd")
                        .HasColumnType("REAL")
                        .HasColumnName("NumMultiRangeEnd");

                    b.Property<string>("NumMultiStart")
                        .HasColumnType("TEXT")
                        .HasColumnName("NumMultiStart");

                    b.Property<float?>("NumStart")
                        .HasColumnType("REAL")
                        .HasColumnName("NumStart");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Operator");

                    b.Property<string>("RelativeDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("RelativeDate");

                    b.Property<string>("StrPrefix")
                        .HasColumnType("TEXT")
                        .HasColumnName("StrPrefix");

                    b.Property<string>("StrValues")
                        .HasColumnType("TEXT")
                        .HasColumnName("StrValues");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT")
                        .HasColumnName("Text");

                    b.Property<int?>("TileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TileId");

                    b.Property<int?>("TimestampEnd")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TimestampEnd");

                    b.Property<int?>("TimestampStart")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TimestampStart");

                    b.Property<string>("WorkShiftEnd")
                        .HasColumnType("TEXT")
                        .HasColumnName("WorkShiftEnd");

                    b.Property<string>("WorkShiftStart")
                        .HasColumnType("TEXT")
                        .HasColumnName("WorkShiftStart");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.HasIndex("DatasourceId");

                    b.HasIndex("TileId");

                    b.ToTable("Filters", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.Folder.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Folders", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.GaugeTile.GaugeTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Aggregator")
                        .HasColumnType("TEXT")
                        .HasColumnName("Aggregator");

                    b.Property<int>("AutoRefresh")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AutoRefresh");

                    b.Property<int>("LegendInTiledMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("LegendInTiledMode");

                    b.Property<float>("Max")
                        .HasColumnType("REAL")
                        .HasColumnName("Max");

                    b.Property<float>("Min")
                        .HasColumnType("REAL")
                        .HasColumnName("Min");

                    b.Property<int>("ReverseColoring")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReverseColoring");

                    b.Property<int>("TileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TileId");

                    b.HasKey("Id");

                    b.HasIndex("TileId");

                    b.ToTable("GaugeTiles", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.HeatmapTile.HeatmapTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("AutoRefresh")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AutoRefresh");

                    b.Property<int>("LegendInTiledMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LegendInTiledMode");

                    b.Property<int?>("QdrTimeMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("QdrTimeMode");

                    b.Property<int>("ReverseColoring")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReverseColoring");

                    b.Property<int>("TileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TileId");

                    b.Property<int>("UseEvents")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("UseEvents");

                    b.HasKey("Id");

                    b.HasIndex("TileId");

                    b.ToTable("HeatmapTiles", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.HistogramTile.HistogramTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("AutoRefresh")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AutoRefresh");

                    b.Property<string>("CategoryMode")
                        .HasColumnType("TEXT")
                        .HasColumnName("CategoryMode");

                    b.Property<int>("LegendInTiledMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("LegendInTiledMode");

                    b.Property<int>("PercentageMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PercentageMode");

                    b.Property<int>("RangeAuto")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RangeAuto");

                    b.Property<int?>("RangeCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RangeCount");

                    b.Property<float?>("RangeEnd")
                        .HasColumnType("REAL")
                        .HasColumnName("RangeEnd");

                    b.Property<float?>("RangeStart")
                        .HasColumnType("REAL")
                        .HasColumnName("RangeStart");

                    b.Property<float?>("RangeStep")
                        .HasColumnType("REAL")
                        .HasColumnName("RangeStep");

                    b.Property<int>("TileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TileId");

                    b.HasKey("Id");

                    b.HasIndex("TileId");

                    b.ToTable("HistogramTiles", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.LinechartTile.LinechartTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("AutoRefresh")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AutoRefresh");

                    b.Property<int>("DatFileMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DatFileMode");

                    b.Property<int>("LastFileSignals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("LastFileSignals");

                    b.Property<int>("LegendInTiledMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("LegendInTiledMode");

                    b.Property<int?>("QdrTimeMode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("QdrTimeMode");

                    b.Property<int>("TileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TileId");

                    b.Property<int>("UseEvents")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("UseEvents");

                    b.HasKey("Id");

                    b.HasIndex("TileId");

                    b.ToTable("LinechartTiles", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.PiechartTile.PiechartTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Aggregator")
                        .HasColumnType("TEXT")
                        .HasColumnName("Aggregator");

                    b.Property<int>("AutoRefresh")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AutoRefresh");

                    b.Property<int?>("CategoryLimit")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CategoryLimit");

                    b.Property<int>("LegendInTiledMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("LegendInTiledMode");

                    b.Property<int>("ShowOthers")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ShowOthers");

                    b.Property<int>("TileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TileId");

                    b.HasKey("Id");

                    b.HasIndex("TileId");

                    b.ToTable("PiechartTiles", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.ScatterchartTile.ScatterchartTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("AbsoluteTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AbsoluteTime");

                    b.Property<int>("AutoRefresh")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AutoRefresh");

                    b.Property<int>("LegendInTiledMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0)
                        .HasColumnName("LegendInTiledMode");

                    b.Property<int>("TileId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TileId");

                    b.Property<string>("XAxisKey")
                        .HasColumnType("TEXT")
                        .HasColumnName("XAxisKey");

                    b.HasKey("Id");

                    b.HasIndex("TileId");

                    b.ToTable("ScatterchartTiles", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.Series.Series", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Aggregator")
                        .HasColumnType("TEXT")
                        .HasColumnName("Aggregator");

                    b.Property<int?>("BarchartId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("BarchartId");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT")
                        .HasColumnName("Color");

                    b.Property<int?>("GaugeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("GaugeId");

                    b.Property<int?>("HeatmapId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("HeatmapId");

                    b.Property<int?>("HistogramId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("HistogramId");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT")
                        .HasColumnName("Key");

                    b.Property<int?>("LegendedHeatmapId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LegendedHeatmapId");

                    b.Property<int?>("LegendedLinechartId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LegendedLinechartId");

                    b.Property<int?>("LinechartId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("LinechartId");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<int?>("Ordinal")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Ordinal");

                    b.Property<int?>("PiechartId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PiechartId");

                    b.Property<int?>("Precision")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Precision");

                    b.Property<int?>("ScatterchartId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ScatterchartId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Type");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT")
                        .HasColumnName("Unit");

                    b.Property<string>("XBaseType")
                        .HasColumnType("TEXT")
                        .HasColumnName("XBaseType");

                    b.Property<string>("XBaseTypes")
                        .HasColumnType("TEXT")
                        .HasColumnName("XBaseTypes");

                    b.HasKey("Id");

                    b.HasIndex("BarchartId");

                    b.HasIndex("GaugeId");

                    b.HasIndex("HeatmapId");

                    b.HasIndex("HistogramId");

                    b.HasIndex("LegendedHeatmapId");

                    b.HasIndex("LegendedLinechartId");

                    b.HasIndex("LinechartId");

                    b.HasIndex("PiechartId");

                    b.HasIndex("ScatterchartId");

                    b.ToTable("Series", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.Tile.Tile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("DashboardId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DashboardId");

                    b.Property<int?>("DatasourceId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DatasourceId");

                    b.Property<int>("H")
                        .HasColumnType("INTEGER")
                        .HasColumnName("H");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasColumnName("Type");

                    b.Property<int>("UseDatFiles")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UseDatFiles");

                    b.Property<int>("W")
                        .HasColumnType("INTEGER")
                        .HasColumnName("W");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER")
                        .HasColumnName("X");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Y");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.HasIndex("DatasourceId");

                    b.ToTable("Tiles", (string)null);
                });

            modelBuilder.Entity("IdvisTestApp.Entities.Axis.Axis", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.BarchartTile.BarchartTile", "BarchartTile")
                        .WithMany()
                        .HasForeignKey("BarchartId");

                    b.HasOne("IdvisTestApp.Entities.HeatmapTile.HeatmapTile", "HeatmapTile")
                        .WithMany()
                        .HasForeignKey("HeatmapId");

                    b.HasOne("IdvisTestApp.Entities.LinechartTile.LinechartTile", "LinechartTile")
                        .WithMany()
                        .HasForeignKey("LinechartId");

                    b.HasOne("IdvisTestApp.Entities.ScatterchartTile.ScatterchartTile", "ScatterchartTile")
                        .WithMany()
                        .HasForeignKey("ScatterchartId");

                    b.Navigation("BarchartTile");

                    b.Navigation("HeatmapTile");

                    b.Navigation("LinechartTile");

                    b.Navigation("ScatterchartTile");
                });

            modelBuilder.Entity("IdvisTestApp.Entities.BarchartTile.BarchartTile", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.Tile.Tile", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("IdvisTestApp.Entities.Dashboard.Dashboard", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.Dashboard.Dashboard", "ParentDashboard")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("ParentDashboard");
                });

            modelBuilder.Entity("IdvisTestApp.Entities.Datasource.Datasource", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.DatasourceConnection.DatasourceConnection", "DatasourceConnection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatasourceConnection");
                });

            modelBuilder.Entity("IdvisTestApp.Entities.Filter.Filter", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.Dashboard.Dashboard", "Dashboard")
                        .WithMany()
                        .HasForeignKey("DashboardId");

                    b.HasOne("IdvisTestApp.Entities.Datasource.Datasource", "Datasource")
                        .WithMany()
                        .HasForeignKey("DatasourceId");

                    b.HasOne("IdvisTestApp.Entities.Tile.Tile", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId");

                    b.Navigation("Dashboard");

                    b.Navigation("Datasource");

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("IdvisTestApp.Entities.Folder.Folder", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.Folder.Folder", "ParentFolder")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("IdvisTestApp.Entities.GaugeTile.GaugeTile", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.Tile.Tile", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("IdvisTestApp.Entities.HeatmapTile.HeatmapTile", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.Tile.Tile", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("IdvisTestApp.Entities.HistogramTile.HistogramTile", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.Tile.Tile", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("IdvisTestApp.Entities.LinechartTile.LinechartTile", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.Tile.Tile", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("IdvisTestApp.Entities.PiechartTile.PiechartTile", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.Tile.Tile", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("IdvisTestApp.Entities.ScatterchartTile.ScatterchartTile", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.Tile.Tile", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("IdvisTestApp.Entities.Series.Series", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.BarchartTile.BarchartTile", "BarchartTile")
                        .WithMany()
                        .HasForeignKey("BarchartId");

                    b.HasOne("IdvisTestApp.Entities.GaugeTile.GaugeTile", "GaugeTile")
                        .WithMany()
                        .HasForeignKey("GaugeId");

                    b.HasOne("IdvisTestApp.Entities.HeatmapTile.HeatmapTile", "HeatmapTile")
                        .WithMany()
                        .HasForeignKey("HeatmapId");

                    b.HasOne("IdvisTestApp.Entities.HistogramTile.HistogramTile", "HistogramTile")
                        .WithMany()
                        .HasForeignKey("HistogramId");

                    b.HasOne("IdvisTestApp.Entities.HeatmapTile.HeatmapTile", "LegendedHeatmapTile")
                        .WithMany()
                        .HasForeignKey("LegendedHeatmapId");

                    b.HasOne("IdvisTestApp.Entities.LinechartTile.LinechartTile", "LegendedLinechartTile")
                        .WithMany()
                        .HasForeignKey("LegendedLinechartId");

                    b.HasOne("IdvisTestApp.Entities.LinechartTile.LinechartTile", "LinechartTile")
                        .WithMany()
                        .HasForeignKey("LinechartId");

                    b.HasOne("IdvisTestApp.Entities.PiechartTile.PiechartTile", "PiechartTile")
                        .WithMany()
                        .HasForeignKey("PiechartId");

                    b.HasOne("IdvisTestApp.Entities.ScatterchartTile.ScatterchartTile", "ScatterchartTile")
                        .WithMany()
                        .HasForeignKey("ScatterchartId");

                    b.Navigation("BarchartTile");

                    b.Navigation("GaugeTile");

                    b.Navigation("HeatmapTile");

                    b.Navigation("HistogramTile");

                    b.Navigation("LegendedHeatmapTile");

                    b.Navigation("LegendedLinechartTile");

                    b.Navigation("LinechartTile");

                    b.Navigation("PiechartTile");

                    b.Navigation("ScatterchartTile");
                });

            modelBuilder.Entity("IdvisTestApp.Entities.Tile.Tile", b =>
                {
                    b.HasOne("IdvisTestApp.Entities.Dashboard.Dashboard", "Dashboard")
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdvisTestApp.Entities.Datasource.Datasource", "Datasource")
                        .WithMany()
                        .HasForeignKey("DatasourceId");

                    b.Navigation("Dashboard");

                    b.Navigation("Datasource");
                });
#pragma warning restore 612, 618
        }
    }
}
